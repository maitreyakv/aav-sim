/*
 * Copyright (C) 2020 Maitreya Venkataswamy - All Rights Reserved
 */

#include "QuadcopterDynamics.h"

// TODO: Add documentation

arma::vec QuadcopterDynamics::F(arma::vec x, arma::vec u, double t) {
    // Common subexpressions
    @SUBEXPR

    // Allocate vector for the function F
    arma::vec F = arma::zeros<arma::vec>(x.n_elem);

    // Compute components of function f
    F[0]  = @F_0
    F[1]  = @F_1
    F[2]  = @F_2
    F[3]  = @F_3
    F[4]  = @F_4
    F[5]  = @F_5
    F[6]  = @F_6
    F[7]  = @F_7
    F[8]  = @F_8
    F[9]  = @F_9
    F[10] = @F_10
    F[11] = @F_11

    // Return the state derivative F
    return F;
}

arma::vec QuadcopterDynamics::f(arma::vec x, arma::vec u, double t, double dt) {
    // Common subexpressions
    @SUBEXPR

    // Allocate vector for the function f
    arma::vec f = arma::zeros<arma::vec>(x.n_elem);

    // Compute components of function f
    f[0]  = @f_0
    f[1]  = @f_1
    f[2]  = @f_2
    f[3]  = @f_3
    f[4]  = @f_4
    f[5]  = @f_5
    f[6]  = @f_6
    f[7]  = @f_7
    f[8]  = @f_8
    f[9]  = @f_9
    f[10] = @f_10
    f[11] = @f_11

    // Return the next state determined by the equations of motion
    return f;
}

arma::mat QuadcopterDynamics::f_x(arma::vec x, arma::vec u, double t, double dt) {
    // Common subexpressions
    @SUBEXPR

    // Allocate matrix for Jacobian with respect to the state
    arma::mat f_x = arma::zeros<arma::mat>(x.n_elem, x.n_elem);

    // Compute components of Jacobian
    @JACOBIAN

    // Return the Jacobian
    return f_x;
}

arma::mat QuadcopterDynamics::f_u(arma::vec x, arma::vec u, double t, double dt) {
    // Common subexpressions
    @SUBEXPR

    // Allocate matrix for Jacobian with respect to the control
    arma::mat f_u = arma::zeros<arma::mat>(x.n_elem, u.n_elem);

    // Compute components of Jacobian
    @JACOBIAN

    // Return the Jacobian
    return f_u;
}

arma::cube QuadcopterDynamics::f_xx(arma::vec x, arma::vec u, double t, double dt) {
    // Common subexpressions
    @SUBEXPR

    // Allocate cube for second derivative of f with respect to the state twice
    arma::cube f_xx = arma::zeros<arma::cube>(x.n_elem, x.n_elem, x.n_elem);

    // Compute components of tensor
    @TENSOR

    // Return the tensor
    return f_xx;
}

arma::cube QuadcopterDynamics::f_uu(arma::vec x, arma::vec u, double t, double dt) {
    // Common subexpressions
    @SUBEXPR

    // Allocate cube for second derivative of f with respect to the control twice
    arma::cube f_uu = arma::zeros<arma::cube>(x.n_elem, u.n_elem, u.n_elem);

    // Compute components of tensor
    @TENSOR

    // Return the tensor
    return f_uu;
}

arma::cube QuadcopterDynamics::f_ux(arma::vec x, arma::vec u, double t, double dt) {
    // Common subexpressions
    @SUBEXPR

    // Allocate cube for second derivative of f with respect to the control and then state
    arma::cube f_ux = arma::zeros<arma::cube>(x.n_elem, u.n_elem, x.n_elem);

    // Compute components of tensor
    @TENSOR

    // Return the tensor
    return f_ux;
}
